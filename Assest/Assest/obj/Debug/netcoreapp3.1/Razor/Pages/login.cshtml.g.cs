#pragma checksum "C:\Users\HP\OneDrive\Desktop\New folder\Assest\Assest\Pages\login.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "4698ff3ceb19adef8b84cd77120cccaae05bb240"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(Assest.Pages.Pages_login), @"mvc.1.0.razor-page", @"/Pages/login.cshtml")]
namespace Assest.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "C:\Users\HP\OneDrive\Desktop\New folder\Assest\Assest\Pages\_ViewImports.cshtml"
using Assest;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"4698ff3ceb19adef8b84cd77120cccaae05bb240", @"/Pages/login.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"72ace8e1cec366b99b5255cb7d4ecbbac31d4d55", @"/Pages/_ViewImports.cshtml")]
    public class Pages_login : global::Microsoft.AspNetCore.Mvc.RazorPages.Page
    {
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_0 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("class", new global::Microsoft.AspNetCore.Html.HtmlString("btn btn-primary mt-2"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_1 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("asp-page", "thank", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        #line hidden
        #pragma warning disable 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        #pragma warning restore 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.HeadTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper;
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.BodyTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper;
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.AnchorTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_AnchorTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            WriteLiteral("<!DOCTYPE html>\r\n<html lang=\"en\">\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("head", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "4698ff3ceb19adef8b84cd77120cccaae05bb2403822", async() => {
                WriteLiteral("\r\n    <meta charset=\"UTF-8\">\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n    <title>Sri Lanka City Weather</title>\r\n");
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.HeadTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("body", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "4698ff3ceb19adef8b84cd77120cccaae05bb2404947", async() => {
                WriteLiteral(@"
    <h1>Get Weather for a City in Sri Lanka</h1>

    <label for=""city"">Enter City Name: </label>
    <input type=""text"" id=""city"" placeholder=""Enter city name"">
    <br />

    <button id=""getCurrentWeatherBtn"" type=""button"">Get Current Weather</button>

    
    <button id=""getWeeklySummaryBtn"" type=""button"">Get Weekly Summary</button>
    <div id=""weatherInfo""></div>

    <br />
    <h2>Weekly Forecast</h2>
    <div id=""weeklyForecast""></div>

    <script>
        //add API key
        const apiKey = '3446cd9affd57d7ab49fcfe5073cf801';

        const getCurrentWeather = async () => {
            const city = document.getElementById('city').value;
            if (!city) {
                document.getElementById('weatherInfo').innerHTML = 'Please enter a city name';
                document.getElementById('weeklyForecast').innerHTML = '';
                return;
            }

            const currentWeatherUrl = `https://api.openweathermap.org/data/2.5/weather?q=${city},LK&app");
                WriteLiteral(@"id=${apiKey}&units=metric`;

            try {
                const currentWeatherResponse = await fetch(currentWeatherUrl);
                const currentWeatherData = await currentWeatherResponse.json();

                if (currentWeatherResponse.ok) {
                    const weatherInfo = `
                                <h2>Current Weather in ${currentWeatherData.name}, Sri Lanka</h2>
                                <p>Temperature: ${currentWeatherData.main.temp}°C</p>
                                <p>Weather: ${currentWeatherData.weather[0].description}</p>
                                <p>Humidity: ${currentWeatherData.main.humidity}%</p>
                            `;
                    document.getElementById('weatherInfo').innerHTML = weatherInfo;
                } else {
                    document.getElementById('weatherInfo').innerHTML = 'City not found';
                }
            } catch (error) {
                console.error('Error fetching weather data:', error)");
                WriteLiteral(@";
                document.getElementById('weatherInfo').innerHTML = 'An error occurred';
            }
        };

        // cheack weekly weather 
        const getWeeklySummary = async () => {
            const city = document.getElementById('city').value;
            if (!city) {
                document.getElementById('weeklyForecast').innerHTML = 'Please enter a city name';
                return;
            }

            const forecastUrl = `https://api.openweathermap.org/data/2.5/forecast?q=${city},LK&appid=${apiKey}&units=metric`;

            try {
                const forecastResponse = await fetch(forecastUrl);
                const forecastData = await forecastResponse.json();

                if (forecastResponse.ok) {
                    const days = {};
                    forecastData.list.forEach(item => {
                        const date = item.dt_txt.split(' ')[0];
                        if (!days[date]) {
                            days[date] = [];
       ");
                WriteLiteral(@"                 }
                        days[date].push(item);
                    });

                    const weeklySummary = Object.entries(days).map(([date, items]) => {
                        const avgTemp = items.reduce((sum, item) => sum + item.main.temp, 0) / items.length;
                        const avgHumidity = items.reduce((sum, item) => sum + item.main.humidity, 0) / items.length;
                        const description = items[0].weather[0].description;

                        return `
                                    <div>
                                        <p>Date: ${date}</p>
                                        <p>Average Temperature: ${avgTemp.toFixed(2)}°C</p>
                                        <p>Average Humidity: ${avgHumidity.toFixed(2)}%</p>
                                        <p>Weather: ${description}</p>
                                    </div>
                                `;
                    }).join('');

                   ");
                WriteLiteral(@" document.getElementById('weeklyForecast').innerHTML = weeklySummary;
                } else {
                    document.getElementById('weeklyForecast').innerHTML = 'Summary not available';
                }
            } catch (error) {
                console.error('Error fetching weather data:', error);
                document.getElementById('weeklyForecast').innerHTML = 'An error occurred';
            }
        };

        document.getElementById('getCurrentWeatherBtn').addEventListener('click', getCurrentWeather);
        document.getElementById('getWeeklySummaryBtn').addEventListener('click', getWeeklySummary);
    </script>
");
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.BodyTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n</html>\r\n\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("a", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "4698ff3ceb19adef8b84cd77120cccaae05bb24010843", async() => {
                WriteLiteral("Exit");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_AnchorTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.AnchorTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_AnchorTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_0);
            __Microsoft_AspNetCore_Mvc_TagHelpers_AnchorTagHelper.Page = (string)__tagHelperAttribute_1.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_1);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n\r\n");
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<Assest.Pages.HomeModel> Html { get; private set; }
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary<Assest.Pages.HomeModel> ViewData => (global::Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary<Assest.Pages.HomeModel>)PageContext?.ViewData;
        public Assest.Pages.HomeModel Model => ViewData.Model;
    }
}
#pragma warning restore 1591
